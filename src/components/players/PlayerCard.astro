---
import type { Player } from '../../types';

interface Props {
  player: Player;
}

const { player } = Astro.props;

const roleColors = {
  TOP: 'bg-red-500',
  JUNGLE: 'bg-green-500',
  MID: 'bg-blue-500',
  ADC: 'bg-yellow-500',
  SUPPORT: 'bg-purple-500'
};

// Asegurar que tenemos valores por defecto para todas las propiedades
const championPool = Array.isArray(player.champion_pool) 
  ? player.champion_pool 
  : JSON.parse(player.champion_pool as string || '[]');

const stats = {
  winRate: player.win_rate || 0,
  gamesPlayed: player.games_played || 0,
  hoursPerWeek: player.hours_per_week || 0,
  hoursPerMonth: player.hours_per_month || 0,
  rank: player.rank || 'UNRANKED'
};
---

<div class="bg-gray-800 rounded-lg p-6 shadow-lg hover:shadow-xl transition-shadow">
  <div class="flex items-center justify-between mb-4">
    <div class="flex items-center gap-4">
      <div class={`w-12 h-12 rounded-full flex items-center justify-center ${roleColors[player.role]}`}>
        <span class="text-white font-bold">{player.role}</span>
      </div>
      <div>
        <h3 class="text-xl font-bold">{player.summoner_name}</h3>
        <p class="text-gray-400">{stats.rank}</p>
      </div>
    </div>
    <div class="flex gap-2">
      <button
        class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm update-button"
        data-puuid={player.puuid}
        onclick="if(confirm('¿Desea continuar con la actualización?')) location.href=`/api/update-players?id=${player.id}`"
      >
        Actualizar
      </button>
      <button
        class="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm delete-button"
        data-id={player.id}
        onclick={`
          if(confirm('¿Desea eliminar este jugador?')) {
            fetch('/api/delete-player', {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ id: '${player.id}' })
            })
            .then(response => response.json())
            .then(data => {
              if(data.success) {
                window.location.reload();
              } else {
                alert('Error al eliminar el jugador: ' + (data.error || 'Error desconocido'));
              }
            })
            .catch(error => {
              alert('Error al eliminar el jugador: ' + error);
            });
          }
        `}
      >
        Eliminar
      </button>
    </div>
  </div>
  
  <div class="grid grid-cols-2 gap-4 mb-4">
    <div>
      <p class="text-gray-400">Winrate</p>
      <p class="text-2xl font-bold text-green-400">{stats.winRate}%</p>
    </div>
    <div>
      <p class="text-gray-400">Partidas</p>
      <p class="text-2xl font-bold text-blue-400">{stats.gamesPlayed}</p>
    </div>
  </div>

  <div class="mb-4">
    <p class="text-gray-400 mb-2">Campeones principales</p>
    <div class="flex gap-2 flex-wrap">
      {championPool.slice(0, 3).map(champion => (
        <span class="bg-gray-700 px-2 py-1 rounded text-sm">{champion}</span>
      ))}
      {championPool.length === 0 && (
        <span class="text-gray-500 text-sm">No hay campeones registrados</span>
      )}
    </div>
  </div>

  <div class="grid grid-cols-2 gap-4 text-sm">
    <div>
      <p class="text-gray-400">Horas/semana</p>
      <p class="font-bold">{stats.hoursPerWeek}h</p>
    </div>
    <div>
      <p class="text-gray-400">Horas/mes</p>
      <p class="font-bold">{stats.hoursPerMonth}h</p>
    </div>
  </div>
</div>